<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[leetcode最后一个单词的长度]]></title>
    <url>%2F2019%2F10%2F14%2Fleetcode%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[##Leetcode ###题目 123456789101112131415给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。说明：一个单词是指由字母组成，但不包含任何空格的字符串。示例:输入: "Hello World"输出: 5来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/length-of-last-word著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 ###题解 1234567891011121314151617181920class Solution &#123;public: int lengthOfLastWord(string s) &#123; if(s.size()==0)//如果字符串长度为0 则说明单词不存在 return 0; int j=0; //记录单词长度 for(int i = s.size()-1;i&gt;=0;i--) &#123; // if(s[i]&gt;='a'&amp;&amp;s[i]&lt;='z'||s[i]&gt;='A'&amp;&amp;s[i]&lt;='Z') if(s[i]!=' ')//如果字符串中元素等于' '时则不执行 j++; else if(j&gt;0) //因为可能存在在字符串的最后有一连串" "所以要确保单词存在时且长度大于0时才是正确的 return j;//返回最后一个单词的长度 &#125; return j; &#125;&#125;;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode实现strStr()]]></title>
    <url>%2F2019%2F10%2F14%2Fleetcode%E5%AE%9E%E7%8E%B0strStr()%2F</url>
    <content type="text"><![CDATA[##Leetcode ###题目 123456789101112131415161718192021实现 strStr() 函数。给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。示例 1:输入: haystack = "hello", needle = "ll"输出: 2示例 2:输入: haystack = "aaaaa", needle = "bba"输出: -1说明:当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/implement-strstr著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 ###题解 12345678910111213141516171819202122232425262728class Solution &#123;public: int strStr(string haystack, string needle) &#123; if(needle.empty()) return 0; int i=0,j=0; while(haystack[i]!='\0'&amp;&amp;needle[j]!='\0')//同时遍历比较，且这样的循环条件保证了needle中下标不会越界 &#123; if(haystack[i]==needle[j]) &#123; i++; j++; &#125; else &#123; i=i-j+1; j=0; //保证了每次needle都是从第一个元素开始比较 &#125; &#125; if(needle[j]=='\0') return i-j; return -1; &#125;&#125;;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode有效的括号]]></title>
    <url>%2F2019%2F10%2F14%2Fleetcode%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324class Solution &#123;public: bool isValid(string s) &#123; stack&lt;char&gt; sta; for(const auto&amp; v : s) //范围for &#123; if(sta.empty()) //如果栈为空 在栈底添加元素v sta.push(v); else if(compare(sta.top(),v))//如果栈不为空，将元素v与栈顶元素比较 sta.pop(); //如果栈顶元素与元素v是相匹配的闭合括号，就删除栈顶元素 else sta.push(v);//如果不匹配将元素v入栈 &#125; return sta.size()==0 ? true : false; &#125;private: bool compare(const char&amp; c1,const char&amp; c2) &#123; return (c1 == '(' &amp;&amp; c2 == ')') || (c1 == '[' &amp;&amp; c2 == ']') || (c1 == '&#123;' &amp;&amp; c2 == '&#125;'); &#125;&#125;;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode实现数组加一的操作]]></title>
    <url>%2F2019%2F10%2F14%2Fleetcode%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8A%A0%E4%B8%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324class Solution &#123;public: vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) &#123; for(int i = digits.size()-1;i&gt;=0;i--) &#123; digits[i]++; //加一 digits[i]=digits[i]%10;//取余数 if(digits[i]!=0)//其实也就是当对应下标元素值不为9时 返回数组 return digits; &#125;//如果数组中全部为9 循环结束时 数组中元素全为0 digits.push_back(0);//在容器尾部添加0 digits[0] = 1; return digits; &#125;&#125;;/* 存在9的几种情况 : 1.当末位只有一个9 2.不连续的9 3.后边有连续的9 4.全是9 */]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode实现x的平方根函数]]></title>
    <url>%2F2019%2F10%2F14%2Fleetcode%E5%AE%9E%E7%8E%B0x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031 class Solution &#123; public: int mySqrt(int x) &#123; if(x==0) return 0; long left = 1; long right = x/2+1;// # 为了照顾到 1 把右边界设置为 x // 2 + 1 while(left&lt;right) &#123; // 注意：这里一定取右中位数，如果取左中位数，代码会进入死循环 // long mid = left + (right - left + 1) / 2; long mid = (left+right+1) &gt;&gt; 1; //mid一定要在循环体内 不然无法重置mid的值 if(mid*mid&gt;x) &#123; right = mid-1; &#125; else &#123; left = mid; &#125; &#125; // 因为一定存在，因此无需后处理 return (int)left; &#125;&#125;;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode回文数]]></title>
    <url>%2F2019%2F10%2F06%2Fleetcode%E5%9B%9E%E6%96%87%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Leetcode回文数1234567891011121314151617class Solution &#123;public: bool isPalindrome(int x) &#123; int k=0;//存储后半部分数字的反转结果 if(x&lt;0||(x%10==0&amp;&amp;x!=0))//排除负数和最后一位数字为0的数字 return false; while(x&gt;k) &#123; k = k*10+x%10; x/=10; &#125; return k==x || k/10==x;//数字个数为偶数和奇数分两种情况 &#125; &#125;；]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于网易云歌曲外链获取方法]]></title>
    <url>%2F2019%2F10%2F04%2F%E5%85%B3%E4%BA%8E%E7%BD%91%E6%98%93%E4%BA%91%E6%AD%8C%E6%9B%B2%E5%A4%96%E9%93%BE%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[首先 找到你要下载的歌曲 用网页版打开 复制链接中的歌曲ID 如：Mike Zhou - The Dawn (亡灵序曲完美钢琴版) [Cover Dreamtale]http://music.163.com/#/song?id=476592630ID就是476592630然后将ID替换到链接 http://music.163.com/song/media/outer/url?id= .mp3 中如：http://music.163.com/song/media/outer/url?id=476592630.mp3复制这个链接 就可以直接通过网页打开纯mp3地址了 添加到下载工具中也可下载 还能添加到QQ空间背景音乐中原作者：Mike-Zhou链接：http://music.163.com/#/topic?id=18506054 http://wap.a9vg.com/thread-5363888-1-1.html]]></content>
      <tags>
        <tag>网易云音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F01%2FHello-World-0%2F</url>
    <content type="text"><![CDATA[I wanna be a rabbit]]></content>
      <tags>
        <tag>Just a test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
